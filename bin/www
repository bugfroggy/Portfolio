#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('portfolio:server');
const https = require('https');
const http = require('http');
const aws_s3 = require('../modules/aws-s3');

aws_s3.getCertificate(process.env.AWS_PRIVATE_BUCKET,
    process.env.AWS_PRIVATE_PREFIX + "cert.pem",
    process.env.AWS_PRIVATE_PREFIX + "private-key.pem", (err, cert, privateKey) => {

        if(err) throw err;

        /**
         * Get port from environment and store in Express.
         */

        let port = normalizePort(process.env.PORT || '43333');
        app.set('port', port);

        /**
         * Create HTTPS server.
         */
        let server;
        let credentials = {};
        try {

            credentials.cert = cert;
            credentials.key = privateKey;

            server = https.createServer(credentials, app);
        } catch (e) {
            console.log("Caught exception: " + e.stack);
            console.log("Creating HTTP server without SSL");
            server = http.createServer(app);
        }

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', () => onListening(server));
    });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
